Integer Validator

Write a class BaseGeometry (based on 6-base_geometry.py).

Requirements:

* Implement a new public instance method `integer_validator(self, name, value):`
    - you can assume `name` is always a string
    - if value is not an integer: raise a `TypeError` exception, with the message `<name> must be an integer`
    - if value is less or equal to 0: raise a `ValueError` exception with the message `<name> must be greater than 0`
* You are not allowed to import any module.

Example:

>>> from models.base_geometry import BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

You are not allowed to import any module.
